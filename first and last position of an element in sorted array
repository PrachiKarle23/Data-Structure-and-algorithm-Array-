Approach 1 - Binary search
int firstAcco(vector<int>& arr,int s, int e, int k){
    int ans=-1;
    while(s<=e){
         int mid=s+(e-s)/2;
         if(arr[mid]==k){
             ans=mid;
             e=mid-1;
         }
         else if(arr[mid]<k){
             s=mid+1;
         }
         else{
             e=mid-1;
         }
    }
    return ans;
}
int lastAcco(vector<int>& arr,int s, int e, int k){
    int ans=-1;
    while(s<=e){
         int mid=s+(e-s)/2;
         if(arr[mid]==k){
             ans=mid;
            s=mid+1;
         }
         else if(arr[mid]<k){
             s=mid+1;
         }
         else{
             e=mid-1;
         }
    }
    return ans;
}
pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
   pair<int, int>p;
   p.first=firstAcco(arr,0,n-1,k);
   p.second=lastAcco(arr,0,n-1,k);
   return p;
}

Approach 2- Recursion
