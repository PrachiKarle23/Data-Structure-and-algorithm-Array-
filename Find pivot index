Approach 1
class Solution {
public:
    int solve(vector<int>& nums,int s,int e)
    {
        if(s>e){
            return 0;
        }
        int sum=0;
        for(int i=s;i<=e;i++){
            sum+=nums[i];
        }
        return sum;
    }
    int pivotIndex(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;i++){
           int sum1=solve(nums,0,i-1);
           int sum2=solve(nums,i+1,n-1);
           if(sum1==sum2){
               return i;
           }
        }
        return -1;
    }
};

Approach 2
class Solution {
public:
    int solve(vector<int>& nums,int s,int e){
        if(s>e){
            return 0;
        }
        int ans=nums[s]+solve(nums,s+1,e);
        return ans;
    }
    int pivotIndex(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;i++){
            int sum1=solve(nums,0,i-1);
            int sum2=solve(nums,i+1,n-1);
            if(sum1==sum2){
                return i;
            }
        }
        return -1;
    }

};

Approach 3
class Solution {
public:
    int solve(vector<int>& nums,int s,int e){
        if(s>e){
            return 0;
        }
        int ans=nums[s]+solve(nums,s+1,e);
        return ans;
    }
    int solve2(vector<int>& nums,int n,int s){
        if(s>=n){
            return -1;
        }
        int sum1=solve(nums,0,s-1);
        int sum2=solve(nums,s+1, n-1);
        if(sum1==sum2){
            return s;
        }
        return solve2(nums,n,s+1);      
    }
    int pivotIndex(vector<int>& nums) {
        int n=nums.size();
        return solve2(nums,n,0);
    }

};

Approach 4
class Solution {
public:
    int pivotIndex(vector<int>& nums) {
       vector<int>pre(nums.size());
       pre[0]=nums[0];
       for(int i=1;i<nums.size();i++){
            pre[i]=nums[i]+pre[i-1];
       } 
        for(int i=0;i<nums.size();i++){
            if(i==0){
               if(pre[nums.size()-1]==pre[i]) {
                   return 0;
               }
               continue;
            }
            if(pre[nums.size()-1]-pre[i]==pre[i-1]){
                return i;
            }
        }
        return -1;
    }
};
