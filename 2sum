//brute force approach
 vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
       
        for(int i=0;i<nums.size();i++)
        {
           for(int j=i+1;j<nums.size();j++)
           {
               if(nums[i]+nums[j]==target){
                    ans.push_back(i);
                ans.push_back(j);
               break;
               }
               
           }
                
        }
        return ans;
    }

//best approach
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       unordered_map<int,int>mp;
       int n=nums.size();
       for(int i=0;i<n;i++)
       {
         int complement=target-nums[i];
         if(mp.count(complement))
         {
            return {mp[complement],i};
         }
         mp[nums[i]]=i;
       }
       return {};
    }
};

//second best
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       unordered_map<int,int>mp;
       int n=nums.size();
       for(int i=0;i<n;i++){
        mp[nums[i]]=i;
       }
       for(int i=0;i<n;i++)
       {
         int complement=target-nums[i];
         if(mp.count(complement) && mp[complement]!=i)
         {
            return {i,mp[complement]};
         }
       }
       return {};
    }
};
